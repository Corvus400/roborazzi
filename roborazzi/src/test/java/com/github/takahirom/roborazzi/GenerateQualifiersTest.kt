package com.github.takahirom.roborazzi

import java.io.File
import javax.xml.parsers.DocumentBuilderFactory
import kotlin.math.roundToInt
import org.junit.Test
import org.w3c.dom.Document
import org.w3c.dom.Node
import org.w3c.dom.NodeList

class GenerateQualifiersTest {
  /**
   * Before execute this. Please run `scripts/download_device_xml.sh`
   */
  @Test
//  @Ignore
  fun generate() {
    println(File(".").absolutePath)
    val xmlFiles =
      File("../scripts/devices").listFiles().toList().filter { it.name.endsWith(".xml") }
    println(xmlFiles)
    val fileContent = buildString {
      appendLine(
        """
            package com.github.takahirom.roborazzi

object RobolectricDeviceQualifiers {
  // Generated by [GenerateQualifiersTest.kt]
  // Data from: AOSP https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices
          """.trimIndent()
      )
      xmlFiles
        .forEach { xmlFile ->
          // parse xml
          val documentBuilderFactory = DocumentBuilderFactory.newInstance()
          val documentBuilder = documentBuilderFactory.newDocumentBuilder()
          val document: Document = documentBuilder.parse(xmlFile)

          val devices = document.getElementsByTagName("d:device").toList()

          appendLine("// FROM: ${xmlFile.name}")
          devices.forEach device@{ device ->
            // find device name
            val deviceNodes = device.childNodes.toList()
            val name = deviceNodes.first { it.nodeName == "d:name" }.textContent
              .replace(" ", "")
              .replace("(", "")
              .replace(")", "")
              .replace("'", "")
              .replace("-", "")
              .replace(".", "")
              .replace("\"", "")

            if (name[0] in '0'..'9') return@device println("skip device:$name")
            val skippingDevicePrefixes =
              listOf(
                "GalaxyNexus",
                "Pixel2",
                "Pixel3",
                "NexusS",
                "Nexus10",
                "Nexus4",
                "Nexus5",
                "Nexus6"
              )
            if (skippingDevicePrefixes.any { name.startsWith(it) }) {
              return@device println("skip device:$name")
            }
            val skippingDevices = listOf("Nexus72012", "Pixel")
            if (skippingDevices.any { name == it }) {
              return@device println("skip device:$name")
            }

            val hardwareNodes =
              deviceNodes.first { it.nodeName == "d:hardware" }.childNodes.toList()

            val screenNodes = hardwareNodes.first { it.nodeName == "d:screen" }.childNodes.toList()
            val screenSize = screenNodes.first { it.nodeName == "d:screen-size" }.textContent
            val screenRatio = screenNodes.first { it.nodeName == "d:screen-ratio" }.textContent
            val pixelDensity = screenNodes.first { it.nodeName == "d:pixel-density" }.textContent
            val dimensions = screenNodes.first { it.nodeName == "d:dimensions" }.childNodes.toList()
            val xDimension = dimensions.first { it.nodeName == "d:x-dimension" }.textContent.toInt()
            val yDimension = dimensions.first { it.nodeName == "d:y-dimension" }.textContent.toInt()

            val nav = hardwareNodes.first { it.nodeName == "d:nav" }.textContent
            val densityValue = when (pixelDensity) {
              "ldpi" -> 120
              "mdpi" -> 160
              "hdpi" -> 240
              "xhdpi" -> 320
              "xxhdpi" -> 480
              "xxxhdpi" -> 640
              "tvdpi" -> 213
              else -> pixelDensity.dropLast(3).toInt()
            }.toDouble()


            val widthDp = (xDimension / (densityValue / 160)).roundToInt()
            val heightDp = (yDimension / (densityValue / 160)).roundToInt()

            val screenRatioQualifier = if (screenRatio == "long") "long" else "notlong"
            val shapeQualifier = if (xDimension == yDimension) "round" else "notround"

            val device = when (xmlFile.name) {
              "wear.xml" -> {
                "watch"
              }

              "tv.xml" -> {
                "television"
              }

              "automotive.xml" -> {
                "car"
              }

              else -> {
                "any"
              }
            }
            appendLine("const val ${name} = \"w${widthDp}dp-h${heightDp}dp-$screenSize-$screenRatioQualifier-$shapeQualifier-$device-$pixelDensity-keyshidden-$nav\"")
          }
        }
      appendLine("}")
    }
    File("../roborazzi/src/main/java/com/github/takahirom/roborazzi/RobolectricDeviceQualifiers.kt").writeText(
      fileContent
    )

  }

  private fun NodeList.toList(): List<Node> {
    val list = mutableListOf<Node>()
    for (i in 0 until length) {
      list.add(item(i))
    }
    return list
  }
}